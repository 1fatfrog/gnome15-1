#!/usr/bin/env python
 
#        +-----------------------------------------------------------------------------+
#        | GPL                                                                         |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) Brett Smith <tanktarta@blueyonder.co.uk>                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        +-----------------------------------------------------------------------------+

'''
Provides a panel indicator that can be used to control and monitor the Gnome15
desktop server (g15-desktop-service). It will display a list of currently active
screens on activation, and allow the configuration UI to be launched (g15-config)
'''

import sys
import pygtk
pygtk.require('2.0')
import gtk
import gnome
import os
import appindicator
import gconf
import traceback

# Logging
import logging
logging.basicConfig()
logger = logging.getLogger()

# Allow running from local path
path = os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), "..", "gnome15", "src", "main", "python")
if os.path.exists(path):
    sys.path.insert(0, path)

import gnome15.g15_globals as g15globals
import gnome15.g15_service as g15service
import gnome15.g15_screen as g15screen
import gnome15.g15_util as g15util
    
# DBUS - Use to check current desktop service status or stop it
import dbus
import gobject

from threading import RLock
from dbus.mainloop.glib import DBusGMainLoop
from dbus.mainloop.glib import threads_init
                
gobject.threads_init()
dbus.mainloop.glib.threads_init()
DBusGMainLoop(set_as_default=True)
loop = gobject.MainLoop()

icon_theme = gtk.icon_theme_get_default()
if g15globals.dev:
    icon_theme.prepend_search_path(g15globals.icons_dir)
    
session_bus = dbus.SessionBus()

class G15Indicator(appindicator.Indicator):
    
    def __init__(self,  parent_window=None):
        
        appindicator.Indicator.__init__(self, "gnome15",
                               self._get_icon_path("logitech-g-keyboard-panel"), 
                               appindicator.CATEGORY_HARDWARE)
        self.set_status (appindicator.STATUS_ACTIVE)
        
        self.page_items = {}
        self.service = None
        self.start_service_item = None
        self.attention_item = None
        self.pages = []        
        self._set_icons()
        self.lock = RLock()
        
        self.conf_client = gconf.client_get_default()
        self.conf_client.notify_add("/apps/gnome15/indicate_only_on_error", self._indicator_options_changed)
        
        # Watch for icon theme changes        
        gtk_icon_theme = gtk.icon_theme_get_default()
        gtk_icon_theme.connect("changed", self._theme_changed)
                
        # Indicator menu
        self.menu = gtk.Menu()
        
        item = gtk.MenuItem("Preferences")
        item.connect("activate", self._show_configuration)
        self.menu.append(item)
        
        item = gtk.MenuItem("About")
        item.connect("activate", self._about_info)
        self.menu.append(item)
        
        self.menu.append(gtk.MenuItem())
        
        self.cycle_screens_item = gtk.CheckMenuItem("Automatically cycle screens")
        self.cycle_screens_item.set_active(self.conf_client.get_bool("/apps/gnome15/cycle_screens"))
        self.conf_client.notify_add("/apps/gnome15/cycle_screens", self._cycle_screens_option_changed)
        self.cycle_screens_item.connect("toggled", self._cycle_screens_changed)
        
        self.menu.append(self.cycle_screens_item)
        self.menu.append(gtk.MenuItem())

        
        # Try and connect to the service now
        try :
            self._connect()        
        except dbus.exceptions.DBusException:
            self._disconnect()

        # Watch for Gnome15 starting and stopping
        session_bus.add_signal_receiver(self._name_owner_changed,
                                     dbus_interface='org.freedesktop.DBus',
                                     signal_name='NameOwnerChanged')  
        
        self.menu.show_all()
        self.set_menu(self.menu)
        
    '''
    DBUS Event Callbacks
    ''' 
    def _name_owner_changed(self, name, old_owner, new_owner):
        if name == "org.gnome15.Gnome15":
            if old_owner == "":
                if self.service == None:
                    self._connect()
            else:
                if self.service != None:
                    self._disconnect()
        
    def _page_created(self, page_sequence_number, page_title):
        page = session_bus.get_object('org.gnome15.Gnome15', '/org/gnome15/Page%d' % page_sequence_number)
        self.lock.acquire()
        try :
            if page.GetPriority() >= g15screen.PRI_LOW:
                self._add_page(page)
        finally :
            self.lock.release()
        
    def _page_title_changed(self, page_sequence_number, title):
        self.lock.acquire()
        try :
            item = self.page_items[str(page_sequence_number)]
            item.set_label(title)
        finally :
            self.lock.release()
    
    def _page_destroyed(self, page_sequence_number):
        self.lock.acquire()
        try :
            page_item_key = str(page_sequence_number)
            if page_item_key in self.page_items:
                item = self.page_items[page_item_key]
                self.menu.remove(item)
                item.destroy()
                del self.page_items[page_item_key]
                self.menu.show_all()
        finally :
            self.lock.release()
        
    def _clear_attention(self):
        if self.conf_client.get_bool("/apps/gnome15/indicate_only_on_error"):
            self.set_status (appindicator.STATUS_PASSIVE)
        else:
            self.set_status (appindicator.STATUS_ACTIVE)
        
    def _attention(self, message = None):
        self.set_status (appindicator.STATUS_ATTENTION)
        
    '''
    Private
    '''
    def _cycle_screens_changed(self, widget):
        self.conf_client.set_bool("/apps/gnome15/cycle_screens", widget.get_active())
        
    def _cycle_screens_option_changed(self, client, connection_id, entry, args):
        self.cycle_screens_item.set_active(entry.value.get_bool())
        
    def _connect(self):
        self.service = session_bus.get_object('org.gnome15.Gnome15', '/org/gnome15/Service')
                
        # Load the initial pages
        self.lock.acquire()
        try : 
            for page_sequence_number in self.service.GetPageSequenceNumbers(g15screen.PRI_LOW):
                page = session_bus.get_object('org.gnome15.Gnome15', '/org/gnome15/Page%d' % page_sequence_number)
                if page.GetPriority() >= g15screen.PRI_LOW:
                    self._add_page(page)
        finally :
            self.lock.release()
        
        # Listen for events
        session_bus.add_signal_receiver(self._page_created, dbus_interface = "org.gnome15.Service", signal_name = "PageCreated")
        session_bus.add_signal_receiver(self._page_title_changed, dbus_interface = "org.gnome15.Service", signal_name = "PageTitleChanged")
        session_bus.add_signal_receiver(self._page_destroyed, dbus_interface = "org.gnome15.Service", signal_name = "PageDestroyed")
        session_bus.add_signal_receiver(self._attention, dbus_interface = "org.gnome15.Service", signal_name = "AttentionRequested")
        session_bus.add_signal_receiver(self._clear_attention, dbus_interface = "org.gnome15.Service", signal_name = "AttentionCleared")

        # Set the initial attention status
        if self.service.IsAttentionRequested():
            message = self.service.GetMessage()
            self._attention(message)
            
            if self.attention_item == None:
                self.attention_item = gtk.MenuItem(message)
                self.menu.append(self.attention_item)
                self.menu.show_all()
                
        else:
            self._clear_attention()
            self.message = self.service.GetMessage()      
            self._remove_attention_menu_item()
            
        # We are now connected, so remove the start service menu item
        self._remove_start_service_item()
        self.cycle_screens_item.set_sensitive(True)
        
    def _disconnect(self):
        
        self.cycle_screens_item.set_sensitive(False)
        
        session_bus.remove_signal_receiver(self._page_created, dbus_interface = "org.gnome15.Service", signal_name = "PageCreated")
        session_bus.remove_signal_receiver(self._page_title_changed, dbus_interface = "org.gnome15.Service", signal_name = "PageTitleChanged")
        session_bus.remove_signal_receiver(self._page_destroyed, dbus_interface = "org.gnome15.Service", signal_name = "PageDestroyed")
        session_bus.remove_signal_receiver(self._attention, dbus_interface = "org.gnome15.Service", signal_name = "AttentionRequested")
        session_bus.remove_signal_receiver(self._clear_attention, dbus_interface = "org.gnome15.Service", signal_name = "AttentionCleared")
             
                
        self._remove_attention_menu_item()
        if self.service != None:
            self._remove_all_page_menu_items()
        
        self._attention("g15-desktop-service is not running.")   
        
        # Add the start menu item if it is not already there
        if self.start_service_item == None:     
            self.start_service_item = gtk.MenuItem("Start Gnome15 Desktop Service")
            self.start_service_item.connect("activate", self._start_desktop_service)
            self.menu.append(self.start_service_item)
            self.menu.show_all()
            
        self.service = None
        
    def _remove_start_service_item(self):
        if self.start_service_item != None:
            self.menu.remove(self.start_service_item)
            self.start_service_item.destroy()
            self.menu.show_all()
            self.start_service_item = None
        
    def _remove_attention_menu_item(self):              
        if self.attention_item != None:
            self.menu.remove(self.attention_item)
            self.attention_item.destroy()
            self.menu.show_all()
            self.attention_item = None
        
    def _about_info(self, widget):         
        about = gnome.ui.About("Gnome15", g15globals.version, "GPL", \
                               "GNOME Applet providing integration with\nthe Logitech G15 and G19 keyboards.", ["Brett Smith <tanktarta@blueyonder.co.uk>"], \
                               ["Brett Smith <tanktarta@blueyonder.co.uk>"], "Brett Smith <tanktarta@blueyonder.co.uk>", gtk.gdk.pixbuf_new_from_file(g15util.get_app_icon(self.conf_client, "gnome15", 128)))
        about.show()
        
    def _remove_all_page_menu_items(self):
        for page_item_key in self.page_items:
            item = self.page_items[page_item_key]
            self.menu.remove(item)
            item.destroy()
            self.menu.show_all()
        self.page_items = {}
        
    def _show_configuration(self, widget):        
        g15util.run_script("g15-config")
        
    def _start_desktop_service(self, widget): 
        self._remove_start_service_item()   
        g15util.run_script("g15-desktop-service", ["-f"])
            
    def _add_page(self, page):
        seq_no = str(page.GetSequenceNumber())
        if not seq_no in self.page_items:
            item = gtk.MenuItem(page.GetTitle())
            self.page_items[seq_no] = item
            item.connect("activate", self._show_page, page)                
            item.show_all()
            self.menu.append(item)
        
    def _show_page(self,event, page):
        page.CycleTo()
        
    def _indicator_options_changed(self, client, connection_id, entry, args):
        if self.get_status() == appindicator.STATUS_PASSIVE or self.get_status() == appindicator.STATUS_ACTIVE:
            self._clear_attention()
    
    def _theme_changed(self, theme):
        self._set_icons()
        
    def _set_icons(self):
        self.set_icon(self._get_icon_path("logitech-g-keyboard-panel"))        
        self.set_attention_icon(self._get_icon_path("logitech-g-keyboard-error-panel"))
        
    def _get_icon_path(self, icon_name):
        if g15globals.dev:
            # Because the icons aren't installed in this mode, they must be provided
            # using the full filename. Unfortunately this means scaling may be a bit
            # blurry in the indicator applet
            return g15util.get_icon_path(icon_name, 128)
        else:
            return icon_name
    
# run it in a gtk window
if __name__ == "__main__":
    try :
        import setproctitle
        setproctitle.setproctitle(os.path.basename(os.path.abspath(sys.argv[0])))
    except:
        pass
    
    G15Indicator()                        
    gtk.main()