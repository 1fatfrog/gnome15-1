#!/bin/bash

modules="../pyinputevent pylibg19 g19d lgsetled gnome15 gnome15-gnome-plugins gnome15-ubuntu-plugins gnome15-indicator gnome15-systemtray gnome15-panel-applet gnome15-impulse15 gnome15-ubuntu gnome15-iconpack"
modules="gnome15-ubuntu-plugins"
base_dist="natty"
arch=$(dpkg --print-architecture)

function get_version() {
    pushd "${root_dir}/$1" >/dev/null 2>&1
    if test -f setup.py
    then version=$(python setup.py --version)
    else if test -f configure.in
         then version=$(./configure -V|head -1|awk '{ print $NF }')
         else version=$(grep "^Version:" debian/control|awk '{ print $2 }')
         fi
    fi
    echo $version
    popd >/dev/null 2>&1
}

function get_changelog_version() {
    pushd ${workspace}/${module_name}-package >/dev/null 2>&1
    changelog_file="./$1-$2/debian/changelog"
    head -1 "${changelog_file}"|awk '{ print $2 }'|tr -d '('|tr -d ')'
    popd >/dev/null 2>&1
}

# Ops
configure=n
copy=n
upload=n

# Build types
build=n
source=n
pdebuild=n

#Options
sign=y
install=n
dist="natty"

while [ $# -gt 0 ]
do
    case "$1" in
       "configure") configure=y ;;
            "copy") copy=y ;;
          "upload") upload=y ;;
        "--nosign") sign=n ;;
       "--install") install=y ;;
              "-s") build=y
                    source=y ;;
              "-b") build=y ;;
              "-p") build=y
                    pdebuild=y ;;
              "-d") dist="$2" 
                    shift ;;
                 *) echo "$0: [configure] [copy] [upload] [-nosign] [-s|-b|-p] [-d lucid|maverick]  [-install]" >&2
                    exit 1 ;;
     esac
     shift
done

if [ "${build}" = "y" -a "${configure}" = "y" -a "${copy}" = n ]
then echo "$0: if you are doing a configure and a build, you must do a copy (add 'copy' command)" >&2
     exit 1
fi

workspace=$HOME/Documents/Gnome15/gnome15-build/${dist}

for i in $modules
do
    if ! test -d $i 
    then echo "$0: not a Gnome15 workspace"a >&2
         exit 2
    fi
done
root_dir=$(pwd)

for i in $modules
do
    #
    # Configure
    # 
    
    if [ "$configure" = "y" ]
    then pushd $i >/dev/null 2>&1
         echo $i
         if test -f setup.py
         then echo " Distutils"
              python setup.py clean
              if python setup.py sdist
              then echo "  Created source dist"
              else echo "$0: Failed to create sdist" >&2
                   exit 1
              fi
         else if test -f configure.in
              then echo " Autotools"
                   make clean
                   make distclean
                   if autoreconf -f && ./configure --prefix=/usr && make && make dist
                   then echo "  Created source dist"
                   else echo "$0: Failed to make dist" >&2
                        exit 1
                   fi
              else echo "Meta"
              fi
         fi
         popd >/dev/null 2>&1
    fi
    
    #
    # Copy
    #
    
    if [ "$copy" = "y" ]
    then pushd $i >/dev/null 2>&1
         module_name=$(basename $i)
         module_dir=$(pwd)
         mkdir -p "${workspace}/${module_name}-package" 2>/dev/null
   
         # get latest version
         if test -f setup.py
         then version=$(python setup.py --version)
              if ! cp dist/${module_name}-${version}.tar.gz "${workspace}/${module_name}-package/${module_name}_${version}.orig.tar.gz"
              then echo "$0: failed to copy source tarball" >&2
                   exit 1
              fi
         else if test -f configure.in
              then version=$(./configure -V|head -1|awk '{ print $NF }')
                   if ! cp ${i}-${version}.tar.gz "${workspace}/${i}-package/${i}_${version}.orig.tar.gz"
                   then echo "$0: failed to copy source tarball" >&2
                        exit 1
                   fi
              else version=$(grep "^Version:" debian/control|awk '{ print $2 }')
              fi
         fi

         pushd "${workspace}/${module_name}-package" >/dev/null 2>&1
         if ! rm -fr ${module_name}-${version}
         then echo "$0: failed to remove old package directory" >&2
              exit 1
         fi

         if test -f ${module_name}_${version}.orig.tar.gz && ! tar xzf ${module_name}_${version}.orig.tar.gz
         then echo "$0: failed to extract source tarball" >&2
              exit 1
         else mkdir ${module_name}-${version}
         fi


         pushd ${module_name}-${version} >/dev/null 2>&1
         
         if ! cp -Rp "${module_dir}/debian" .
         then echo "$0: failed to copy debian directory to package directory" >&2
         fi

         # If not working on the base distribution, then adjust the distributions in packages
         if [ "$dist" != "$base_dist" ]
         then echo "Adjusting distribution details"
              changelog_version=$(get_changelog_version ${module_name} ${version})
              new_changelog_version=${changelog_version}~lucid1
              sed "s/ (${changelog_version}) ${base_dist}\;/ (${new_changelog_version}) ${dist}\;/" debian/changelog > debian/changelog.new
              mv debian/changelog.new debian/changelog

              # CDBS in Lucid is not new enough to have python rules, 
              # so the version is adjusted and cdbs rules
              # are inserted into the debian/rules file
              #if [ "$dist" = "lucid" ]
              #then sed "s/cdbs (>=.*)/ cdbc (>=ZZ(${new_changelog_version}) ${dist}\;/" debian/changelog > debian/changelog.new
         fi

         popd # back to packge dir
         popd # back to module
         popd # back to workspace
    fi

    if [ "$build" = "y" ]
    then module_name=$(basename $i)
         version=$(get_version $i)

         if ! pushd ${workspace}/${module_name}-package >/dev/null 2>&1
         then echo "$0: package $i not copied" >&2
              exit 1
         fi

         pushd "${module_name}-${version}" >/dev/null 2>&1

         signarg1="-us"
         signarg2="-uc"
         if [ "$sign" = "y" ]
         then signarg1=""
              signarg2=""
         fi

         
         #then if ! BUILD_DIST=${dist} pdebuild -- --basetgz /var/cache/pbuilder/${dist}-${arch}-base.tgz --distribution ${dist} --override-config

         if [ "$pdebuild" = "y" ]
         then if ! BUILD_DIST=${dist} pdebuild -- --distribution ${dist} --override-config
              then echo "$0: pdebuild failed" >&2
                   exit 1
              fi

              changelog_version=$(get_changelog_version ${module_name} ${version})
              pushd ${workspace}/${module_name}-package
              changes_file="${module_name}_${changelog_version}_${arch}.changes"
              echo "Changes file: '${changes_file}'"
              debsign "${changes_file}"
              if ! dput local "${changes_file}"
              then echo "$0: dput failed" >&2
                   exit 1
              fi
              if ! sudo DIST=${dist} pbuilder update --override-config --configfile ~/.pbuilderrc
              then echo "$0: pbuilder update failed" >&2
                   exit 1
              fi
              popd
           
              
         else if [ "$source" = "y" ] 
              then if ! debuild -S ${signarg1} ${signarg2}
                   then echo "$0: failed to build binary package $i" >&2
                        exit 1
                   fi
              else if ! debuild ${signarg1} ${signarg2} -b
                   then echo "$0: failed to build binary package $i" >&2
                        exit 1
                   fi
              fi
         fi
         
         popd #back to package dir

         if [ ${install} = "y" ]
         then pwd
              if ! sudo dpkg -i $(ls *${version}*.deb|grep -v g15daemon)
              then echo "$0: failed to install package" >&2
                   exit 1
              fi
         fi
          
         popd #back to default
    fi
    
    if [ "$upload" = "y" ]
    then module_name=$(basename $i)
         version=$(get_version $i)
         pushd ${workspace}/${module_name}-package >/dev/null 2>&1
         changelog_version=$(get_changelog_version ${module_name} ${version})
         changes_file=${module_name}_${changelog_version}_source.changes
         if [ -f "${changes_file}" ]
         then ppa_loc=ppa:gnome15-team/${dist}
              ppa_loc=ppa:tanktarta/gnome15
              if ! dput -f ${ppa_loc} ${changes_file}
              then echo "$0: dput failed" >&2
                   exit 1
              fi
         else echo "$0: no changes file ${changes_file}, did you build source with -s" >&2
              exit 1
         fi
         popd >/dev/null >&1
    fi
done

