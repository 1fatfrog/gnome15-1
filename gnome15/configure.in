AC_INIT(gnome15, 0.7.2)
AC_CONFIG_SRCDIR([src/main/python/gnome15/g15service.py])
AM_INIT_AUTOMAKE([tar-ustar])

dnl AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

dnl AC_PATH_PROG(GCONFTOOL, gconftool-2)
dnl AM_GCONF_SOURCE_2
dnl AC_PROG_INTLTOOL([0.21])

dnl check for python
AM_PATH_PYTHON

dnl AC_ARG_ENABLE([indicator],
dnl 			[  --enable-indicator	Enable Panel Indicator support],
dnl 			[case "${enableval}" in
dnl 				yes)	indicator=true ;;
dnl 				no)		indicator=false ;;
dnl 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-indicator]) ;;
dnl 			esac],[debug=false])
dnl AM_CONDITIONAL([INDICATOR],	[test x$indicator = xtrue])

dnl AC_ARG_ENABLE([applet],
dnl 			[  --enable-applet	Enable Panel Applet support],
dnl 			[case "${enableval}" in
dnl 				yes)	applet=true ;;
dnl 			m	no)		applet=false ;;
dnl 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-applet]) ;;
dnl 			esac],[debug=false])
dnl AM_CONDITIONAL([APPLET],	[test x$applet = xtrue])

dnl Dependencies for core applet and tools

dnl Determine if pyinputevent is available. If it is, kernel driver can be built
AX_PYTHON_MODULE(pyinputevent, [])
AS_IF([test "x${HAVE_PYMOD_PYINPUTEVENT}" = "xyes"],
     [pyinputevent=yes])     
AC_ARG_ENABLE([kernel-driver],
	[AS_HELP_STRING([--enable-kernel-driver],
		[Enable Kernel driver support (requires pyinputevent and lg4l kernel drivers).])],
	[case "${enableval}" in
 				yes)	kernel_driver=${pyinputevent} ;;
 				no)		kernel_driver=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-kernel-driver]) ;;
 	esac],
	[kernel_driver=${pyinputevent}])
AM_CONDITIONAL([ENABLE_DRIVER_KERNEL], [test x$kernel_driver = xyes])
     
dnl Determine if pylibg19 is available. If it is, g19direct driver can be built
AX_PYTHON_MODULE(g19, [])
AS_IF([test "x${HAVE_PYMOD_G19}" = "xyes"],
     [pylibg19=yes])
AC_ARG_ENABLE([g19direct-driver],
	[AS_HELP_STRING([--enable-g19direct-driver],
		[Enable G19Direct driver support (requires pylibg19).])],
	[case "${enableval}" in
 				yes)	g19direct_driver=${pylibg19} ;;
 				no)		g19direct_driver=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-g19direct-driver]) ;;
 	esac],
	[g19direct_driver=${pylibg19}])
AM_CONDITIONAL([ENABLE_DRIVER_G19DIRECT], [test x$g19direct_driver = xyes])
     
dnl Allow udev files to be installed
AC_ARG_ENABLE([udev],
	[AS_HELP_STRING([--enable-udev=path-to-rules-directory],
		[Install udev rules to set permissions of various keyboard input and output devices])],
	[udev_rules_path=${enableval}],
	[udev_rules_path=no])	
AM_CONDITIONAL([ENABLE_UDEV], [test x$udev_rules_path != xno])
AC_SUBST(UDEV_RULES_PATH, $udev_rules_path)
AS_IF([test "x${g19direct_driver}" = "xyes" -o "x${kernel_driver}" = "xyes" ],
     [AS_IF([test "x${udev_rules_path}" = "xno"],
     	[AC_MSG_ERROR([If either the kernel driver or the g19direct driver is enabled, you must also provide the location of your distributions udev rules using --enable-udev=path-to-rules-directory])])])

dnl Required modules
AX_PYTHON_MODULE(Image, [])
AS_IF([test "x${HAVE_PYMOD_IMAGE}" = "xno"],
     [AC_MSG_ERROR([Requires Python Image Library])])
     
AX_PYTHON_MODULE(cairo, [])
AS_IF([test "x${HAVE_PYMOD_CAIRO}" = "xno"],
     [AC_MSG_ERROR([Requires Python bindings for the Cairo vector graphics library])])

AX_PYTHON_MODULE(dbus, [])
AS_IF([test "x${HAVE_PYMOD_DBUS}" = "xno"],
     [AC_MSG_ERROR([Requires DBUS bindings for Python])])

AX_PYTHON_MODULE(pyinotify, [])
AS_IF([test "x${HAVE_PYMOD_PYINOTIFY}" = "xno"],
     [AC_MSG_ERROR([Requires Pyinotify bindings for Python])])
     
AX_PYTHON_MODULE(lxml, [])
AS_IF([test "x${HAVE_PYMOD_LXML}" = "xno"],
     [AC_MSG_ERROR([Requires LXML bindings for Python])])
     
AX_PYTHON_MODULE(gobject, [])
AS_IF([test "x${HAVE_PYMOD_GOBJECT}" = "xno"],
     [AC_MSG_ERROR([Requires GObject for Python])])
     
AX_PYTHON_MODULE(xdg, [])
AS_IF([test "x${HAVE_PYMOD_XDG}" = "xno"],
     [AC_MSG_ERROR([Requires Python XDG])])
     
AX_PYTHON_MODULE(usb, [])
AS_IF([test "x${HAVE_PYMOD_USB}" = "xno"],
     [AC_MSG_ERROR([Requires PyUSB, python bindings for libusb])])
     
AX_PYTHON_MODULE(gconf, [])
AS_IF([test "x${HAVE_PYMOD_GCONF}" = "xno"],
     [AC_MSG_ERROR([Requires GConf bindings for Python])])
     
AX_PYTHON_MODULE(rsvg, [])
AS_IF([test "x${HAVE_PYMOD_RSVG}" = "xno"],
     [AC_MSG_ERROR([Requires RSVG for Python])])

AX_PYTHON_MODULE(pango, [])
AS_IF([test "x${HAVE_PYMOD_PANGO}" = "xno"],
     [AC_MSG_ERROR([Requires Pango for Python])])
     
AX_PYTHON_MODULE(Xlib, [])
AS_IF([test "x${HAVE_PYMOD_XLIB}" = "xno"],
     [AC_MSG_ERROR([Requires Python Xlib - Python Xlib bindings])])

AX_PYTHON_MODULE(setproctitle, [])
AS_IF([test "x${HAVE_PYMOD_SETPROCTITLE}" = "xno"],
     [AC_MSG_WARN([It is recommend that setproctitle is installed])])
     
dnl Dependencies for panel integration components
dnl
dnl Tries to work out the best one to use. If appindicator is available
dnl by default that will be used. Failing that, the systemtray will
dnl be used. Finally, if gnomeapplet is available, that will be used.
dnl The defauolt component(s) built can be changed using --enabled
dnl and --disable flags

AC_ARG_ENABLE([indicator],
	[AS_HELP_STRING([--enable-indicator],
		[Enable Indicator panel integration. Requires python-appindicator])],
	[case "${enableval}" in
 				yes)	indicator=yes ;;
 				no)		indicator=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-indicator]) ;;
 	esac],
	[indicator=yes])
AX_PYTHON_MODULE(appindicator, [])
AS_IF([test "x${HAVE_PYMOD_APPINDICATOR}" = "xyes"],
	  [indicator=$indicator],
	  [indicator=no])
AM_CONDITIONAL([ENABLE_INDICATOR], [test x$indicator = xyes])

AC_ARG_ENABLE([systemtray],
	[AS_HELP_STRING([--enable-systemtray],
		[Enable System Tray panel integration.])],
	[case "${enableval}" in
 				yes)	systemtray=yes ;;
 				no)		systemtray=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-systemtray]) ;;
 	esac],
	[case "${indicator}" in
 				yes)	systemtray=no ;;
 				no)		systemtray=yes ;;
 	esac])
AM_CONDITIONAL([ENABLE_SYSTEMTRAY], [test x$systemtray = xyes])

AC_ARG_ENABLE([applet],
	[AS_HELP_STRING([--enable-applet],
		[Enable GNOME panel applet integration.])],
	[case "${enableval}" in
 				yes)	applet=yes ;;
 				no)		applet=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-applet]) ;;
 	esac],
 	[case "${indicator}:${systemtray}" in
 				"no:no")	applet=yes ;;
 					  *)	applet=no ;;
 	esac])
AX_PYTHON_MODULE(gnomeapplet, [])
AS_IF([test "x${HAVE_PYMOD_GNOMEAPPLET}" = "xyes"],
	  [applet=$applet],
	  [applet=no])
AM_CONDITIONAL([ENABLE_APPLET], [test x$applet = xyes])

PKG_CHECK_MODULES(PYGTK, pygtk-2.0)
AC_SUBST(PYGTK_CFLAGS)
AC_SUBST(PYGTK_LIBS)

dnl ALL_LINGUAS="es ja pl pt sr sr@Latn sv it"
                                                                                
dnl GETTEXT_PACKAGE=gnome-blog
dnl AC_SUBST(GETTEXT_PACKAGE)
dnl AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [The gettext package])

dnl AM_GLIB_GNU_GETTEXT

AC_OUTPUT([
Makefile
src/Makefile
src/scripts/Makefile
src/themes/Makefile
src/themes/default/Makefile
src/udev/Makefile
src/gnome/Makefile
src/gnome/applet/Makefile
src/gnome/applet/GNOME_G15Applet.server
src/gnome/applications/Makefile
src/gnome/applications/g15-config.desktop
src/gnome/autostart/Makefile
src/gnome/autostart/gnome15.desktop
src/gnome/autostart/g15-indicator.desktop
src/gnome/autostart/g15-systemtray.desktop
src/gnome/dbus/Makefile
src/main/Makefile
src/main/python/Makefile
src/main/python/gnome15/Makefile
src/main/python/gnome15/g15globals.py
src/main/python/gnome15/drivers/Makefile
src/main/resources/Makefile
src/main/resources/icons/Makefile
src/main/resources/icons/hicolor/Makefile
src/main/resources/icons/hicolor/16x16/Makefile
src/main/resources/icons/hicolor/16x16/status/Makefile
src/main/resources/icons/hicolor/22x22/Makefile
src/main/resources/icons/hicolor/22x22/apps/Makefile
src/main/resources/icons/hicolor/22x22/status/Makefile
src/main/resources/icons/hicolor/24x24/Makefile
src/main/resources/icons/hicolor/24x24/apps/Makefile
src/main/resources/icons/hicolor/24x24/status/Makefile
src/main/resources/icons/hicolor/48x48/Makefile
src/main/resources/icons/hicolor/48x48/apps/Makefile
src/main/resources/icons/hicolor/64x64/Makefile
src/main/resources/icons/hicolor/64x64/apps/Makefile
src/main/resources/icons/hicolor/scalable/Makefile
src/main/resources/icons/hicolor/scalable/apps/Makefile
src/main/resources/icons/hicolor/scalable/status/Makefile
src/main/resources/icons/hicolor/scalable/devices/Makefile
src/main/resources/images/Makefile
src/main/resources/glade/Makefile
src/man/Makefile
])

AS_ECHO("Available features :-")
AS_ECHO("")
AS_ECHO("Panel Integration")
AS_ECHO("-----------------")
AS_ECHO_N("indicator                   - ")
AS_IF([test "x$indicator" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled (missing python-appindicator library)")])
AS_ECHO_N("systemtray                  - ")
AS_IF([test "x$systemtray" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("GNOME panel applet          - ")
AS_IF([test "x$applet" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO("")
AS_ECHO("Drivers")
AS_ECHO("-------")
AS_ECHO("driver_g15 (g15daemon)      - Enabled")
AS_ECHO("driver_g19 (g19d)           - Enabled")
AS_ECHO_N("driver_g19direct            - ")
AS_IF([test "x$g19direct_driver" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("driver_kernel               - ")
AS_IF([test "x$kernel_driver" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
