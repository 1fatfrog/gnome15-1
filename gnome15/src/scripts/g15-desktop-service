#!/usr/bin/env python
 
#        +-----------------------------------------------------------------------------+
#        | GPL                                                                         |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) Brett Smith <tanktarta@blueyonder.co.uk>                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        +-----------------------------------------------------------------------------+


def module_exists(module_name):
    try:
        __import__(module_name)
    except ImportError:
        return False
    else:
        return True

# This must be done first for the Lens plugin to work
if module_exists("gi.repository"):
	from gi.repository import GLib, GObject, Gio

import sys
import os
import glib
import time

# Logging
import logging
logging.basicConfig(format='%(levelname)s:%(asctime)s:%(threadName)s:%(name)s:%(message)s', datefmt='%H:%M:%S')
logger = logging.getLogger()

LEVELS = {'debug': logging.DEBUG,
          'info': logging.INFO,
          'warning': logging.WARNING,
          'error': logging.ERROR,
          'critical': logging.CRITICAL}

# Allow running from local path
path = os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), "..","main", "python"))
if os.path.exists(path):
    sys.path.insert(0, path) 
    
#
import gobject
gobject.threads_init()

# DBUS - Use to check current desktop service status or stop it
import dbus
from dbus.mainloop.glib import DBusGMainLoop
from dbus.mainloop.glib import threads_init
threads_init()
DBusGMainLoop(set_as_default=True)

# Server host class

def check_service_status(session_dbus):
    try :
        session_bus.get_object('org.gnome15.Gnome15', '/org/gnome15/Service').GetServerInformation()
        return True
    except:
        return False

def start_service(no_trap=False): 
	if module_exists("setproctitle"):
        import setproctitle
        setproctitle.setproctitle(os.path.basename(os.path.abspath(sys.argv[0])))
    else:
        # Not a big issue
        logger.debug("No setproctitle, process will be named 'python'")

    # Start the loop    
    try :
        import gnome15.g15service as g15service
        service = g15service.G15Service(None, no_trap=no_trap)
        g15service.logger.setLevel(logger.level) 
        service.start_loop()
    except dbus.exceptions.NameExistsException:
        print "Gnome15 desktop service is already running"
        sys.exit(1)
    
if __name__ == "__main__":
    import optparse
    parser = optparse.OptionParser()
    parser.add_option("-l", "--log", dest="log_level", metavar="INFO,DEBUG,WARNING,ERROR,CRITICAL",
        default="warning" , help="Log level")
    parser.add_option("-f", "--foreground", action="store_true", dest="foreground",
        default=False, help="Run desktop service in foreground.")
    parser.add_option("-n", "--notrap", action="store_true", dest="no_trap",
        default=False, help="Do not try to trap signals.")
    (options, args) = parser.parse_args()
    
    level = logging.NOTSET
    if options.log_level != None:      
        level = LEVELS.get(options.log_level.lower(), logging.NOTSET)
        logger.setLevel(level = level)
        
    session_bus = None
        
    if len(args) == 1 and ( args[0] == "stop" or args[0] == "restart" ):
        session_bus = dbus.SessionBus()
        if not check_service_status(session_bus):
            if args[0] == "stop":
                print "Gnome15 desktop service is not running"
        else:            
            session_bus.get_object('org.gnome15.Gnome15', '/org/gnome15/Service').Stop()
            while check_service_status(session_bus):
                pass
        session_bus.close()
            
    if len(args) == 0 or ( len(args) == 1 and ( args[0] == "start" or args[0] == "restart" ) ):
        session_bus = dbus.SessionBus()
        if check_service_status(session_bus):
            print "Gnome15 desktop service already running"
        else:
            if options.foreground or ( not options.foreground and os.fork() == 0 ):
                start_service(options.no_trap)
