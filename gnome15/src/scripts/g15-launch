#!/usr/bin/env python
 
#        +-----------------------------------------------------------------------------+
#        | GPL                                                                         |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) Brett Smith <tanktarta@blueyonder.co.uk>                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        +-----------------------------------------------------------------------------+


import sys
import os
import glib
import time

# Logging
import logging
logging.basicConfig(format='%(levelname)s:%(asctime)s:%(threadName)s:%(name)s:%(message)s', datefmt='%H:%M:%S')
logger = logging.getLogger()

LEVELS = {'debug': logging.DEBUG,
          'info': logging.INFO,
          'warning': logging.WARNING,
          'error': logging.ERROR,
          'critical': logging.CRITICAL}

# Allow running from local path
path = os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), "..","main", "python"))
if os.path.exists(path):
    sys.path.insert(0, path) 
    
import dbus
from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

if __name__ == "__main__":
    import optparse
    parser = optparse.OptionParser()
    parser.add_option("-l", "--log", dest="log_level", metavar="INFO,DEBUG,WARNING,ERROR,CRITICAL",
        default="warning" , help="Log level")
    parser.add_option("-p", "--profile", action="store_true", dest="profile",
        default="", help="Name of profile to activate. Defaults to automatic selection.")
    parser.add_option("-s", "--screens", action="store_true", dest="screens",
        default="", help="Which device(s) to use. Defaults to best device. \
Names are in the format [model]_[index]. So if you have two G13 keyboards \
and a G19, to select the first G13 you would use g13_0.")
    (options, args) = parser.parse_args()
    if len(args) == 0:
        print "You must provide the command to launch through Gnome15 as an argument."
        sys.exit(2)
    
    level = logging.NOTSET
    if options.log_level != None:      
        level = LEVELS.get(options.log_level.lower(), logging.NOTSET)
        logger.setLevel(level = level)
        
    session_bus = dbus.SessionBus()
    try :
        service = session_bus.get_object('org.gnome15.Gnome15', \
                               '/org/gnome15/Service')
    except:
        print "Gnome15 desktop service is not running. Applications may not be \
launched through it. You can start the service using g15-desktop-service."
        sys.exit(1)
        
    service.Launch(options.profile, options.screens, args)
    