AC_INIT(gnome15-plugins, 0.7.6)
AC_CONFIG_SRCDIR([src/cal/cal.py])
AM_INIT_AUTOMAKE

AM_MAINTAINER_MODE

AC_CONFIG_MACRO_DIR([m4])

AC_PROG_LIBTOOL
AC_PROG_CC
     
dnl AX_PYTHON_DEVEL([2.6])

AM_PATH_PYTHON([2.6])

AX_PYTHON_MODULE(gnome15, [])
AS_IF([test "x${HAVE_PYMOD_GNOME15}" = "xno"],
     [AC_MSG_ERROR([Requires Gnome15])])
     
     
dnl Dependencies for plugins. Each plugin by default is only enabled
dnl if dependencies are available. Each plugin may also be
dnl individually enabled / disabled using configure options

dnl Plugins that only depend on Gnome15 or its dependencies

dnl Background plugin
AC_ARG_ENABLE([background],
	[AS_HELP_STRING([--enable-background],
		[Enable Background plugin.])],
	[case "${enableval}" in
 				yes)	background_plugin=yes ;;
 				no)		background_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-background]) ;;
 	esac],
	[background_plugin=yes])
AM_CONDITIONAL([ENABLE_BACKGROUND_PLUGIN], [test x$background_plugin = xyes])

dnl Cairo Clock plugin
AC_ARG_ENABLE([cairo-clock],
	[AS_HELP_STRING([--enable-cairo-clock],
		[Enable Cairo Clock plugin.])],
	[case "${enableval}" in
 				yes)	cairo_clock_plugin=yes ;;
 				no)		cairo_clock_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-cairo-clock]) ;;
 	esac],
	[cairo_clock_plugin=yes])
AM_CONDITIONAL([ENABLE_CAIRO_CLOCK_PLUGIN], [test x$cairo_clock_plugin = xyes])

dnl Clock plugin
AC_ARG_ENABLE([clock],
	[AS_HELP_STRING([--enable-clock],
		[Enable Simple Clock plugin (plugin used in website example).])],
	[case "${enableval}" in
 				yes)	clock_plugin=yes ;;
 				no)		clock_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-clock]) ;;
 	esac],
	[clock_plugin=yes])
AM_CONDITIONAL([ENABLE_CLOCK_PLUGIN], [test x$clock_plugin = xyes])

dnl Special effects plugin
AC_ARG_ENABLE([fx],
	[AS_HELP_STRING([--enable-fx],
		[Enable Special Effects plugin.])],
	[case "${enableval}" in
 				yes)	fx_plugin=yes ;;
 				no)		fx_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-fx]) ;;
 	esac],
	[fx_plugin=yes])
AM_CONDITIONAL([ENABLE_FX_PLUGIN], [test x$fx_plugin = xyes])

dnl G15daemon Server plugin
AC_ARG_ENABLE([g15daemon-server],
	[AS_HELP_STRING([--enable-g15daemon-server],
		[Enable G15Daemon Server plugin (network server with protocol compatible with g15daemon, allows g15daemon scripts to be used when it is not installed).])],
	[case "${enableval}" in
 				yes)	g15daemon_server_plugin=yes ;;
 				no)		g15daemon_server_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-g15daemon-server]) ;;
 	esac],
	[g15daemon_server_plugin=yes])
AM_CONDITIONAL([ENABLE_G15DAEMON_SERVER_PLUGIN], [test x$g15daemon_server_plugin = xyes])

dnl Instant Messenger plugin

AX_PYTHON_MODULE(telepathy, [])
AS_IF([test "x${HAVE_PYMOD_TELEPATHY}" = "xyes"],
	  [have_telepathy=yes],
	  [have_telepathy=no])
AC_ARG_ENABLE([im],
	[AS_HELP_STRING([--enable-im],
		[Enable Instant Messenger plugin. Displays current contact list and status (currently works with Telepathy framework based clients).])],
	[case "${enableval}" in
 				yes)	im_plugin=yes ;;
 				no)		im_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-im]) ;;
 	esac],
	[im_plugin=${have_telepathy}])
AM_CONDITIONAL([ENABLE_IM_PLUGIN], [test x$im_plugin = xyes])

dnl Macro Recorder plugin
AC_ARG_ENABLE([macro-recorder],
	[AS_HELP_STRING([--enable-macro-recorder],
		[Enable Macro Recorder plugin.])],
	[case "${enableval}" in
 				yes)	macro_recorder_plugin=yes ;;
 				no)		macro_recorder_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-macro-recorder]) ;;
 	esac],
	[macro_recorder_plugin=yes])
AM_CONDITIONAL([ENABLE_MACRO_RECORDER_PLUGIN], [test x$macro_recorder_plugin = xyes])

dnl Macro Display plugin
AC_ARG_ENABLE([macros],
	[AS_HELP_STRING([--enable-macros],
		[Enable Macro Display plugin.])],
	[case "${enableval}" in
 				yes)	macros_plugin=yes ;;
 				no)		macros_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-macros]) ;;
 	esac],
	[macros_plugin=yes])
AM_CONDITIONAL([ENABLE_MACROS_PLUGIN], [test x$macros_plugin = xyes])

dnl Menu plugin
AC_ARG_ENABLE([menu],
	[AS_HELP_STRING([--enable-menu],
		[Enable Menu plugin.])],
	[case "${enableval}" in
 				yes)	menu_plugin=yes ;;
 				no)		menu_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-menu]) ;;
 	esac],
	[menu_plugin=yes])
AM_CONDITIONAL([ENABLE_MENU_PLUGIN], [test x$menu_plugin = xyes])

dnl Mounts plugin
AC_ARG_ENABLE([mounts],
	[AS_HELP_STRING([--enable-mounts],
		[Enable Mounts plugin.])],
	[case "${enableval}" in
 				yes)	mounts_plugin=yes ;;
 				no)		mounts_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-mounts]) ;;
 	esac],
	[mounts_plugin=yes])
AM_CONDITIONAL([ENABLE_MOUNTS_PLUGIN], [test x$mounts_plugin = xyes])

dnl MPRIS plugin
AC_ARG_ENABLE([mpris],
	[AS_HELP_STRING([--enable-mpris],
		[Enable MPRIS plugin. Displays currently playing media players that support MPRIS])],
	[case "${enableval}" in
 				yes)	mpris_plugin=yes ;;
 				no)		mpris_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-mpris]) ;;
 	esac],
	[mpris_plugin=yes])
AM_CONDITIONAL([ENABLE_MPRIS_PLUGIN], [test x$mpris_plugin = xyes])

dnl Notify plugin
AC_ARG_ENABLE([notify-lcd],
	[AS_HELP_STRING([--enable-notify-lcd],
		[Enable Notify LCD plugin. Takes over as notification daemon and displays messages on LCD, blinks keyboard])],
	[case "${enableval}" in
 				yes)	notify_lcd_plugin=yes ;;
 				no)		notify_lcd_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-notify-lcd]) ;;
 	esac],
	[notify_lcd_plugin=yes])
AM_CONDITIONAL([ENABLE_NOTIFY_LCD_PLUGIN], [test x$notify_lcd_plugin = xyes])

dnl Panel plugin
AC_ARG_ENABLE([panel],
	[AS_HELP_STRING([--enable-panel],
		[Enable Panel plugin. Reserves area of screen for other plugins to display permanent information])],
	[case "${enableval}" in
 				yes)	panel_plugin=yes ;;
 				no)		panel_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-panel]) ;;
 	esac],
	[panel_plugin=yes])
AM_CONDITIONAL([ENABLE_PANEL_PLUGIN], [test x$panel_plugin = xyes])

dnl Screensaver plugin
AC_ARG_ENABLE([screensaver],
	[AS_HELP_STRING([--enable-screensaver],
		[Enable Screensaver plugin. Displays mesage and dims keyboard when desktop screesaver is activated])],
	[case "${enableval}" in
 				yes)	screensaver_plugin=yes ;;
 				no)		screensaver_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-screensaver]) ;;
 	esac],
	[screensaver_plugin=yes])
AM_CONDITIONAL([ENABLE_SCREENSAVER_PLUGIN], [test x$screensaver_plugin = xyes])

dnl Stopwatch plugin
AC_ARG_ENABLE([stopwatch],
	[AS_HELP_STRING([--enable-stopwatch],
		[Enable Stopwatch plugin. Dual mode, dual timer stopwatch])],
	[case "${enableval}" in
 				yes)	stopwatch_plugin=yes ;;
 				no)		stopwatch_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-stopwatch]) ;;
 	esac],
	[stopwatch_plugin=yes])
AM_CONDITIONAL([ENABLE_STOPWATCH_PLUGIN], [test x$stopwatch_plugin = xyes])

dnl Videoplayer plugin
AC_ARG_ENABLE([videoplayer],
	[AS_HELP_STRING([--enable-videoplayer],
		[Enable Videoplayer plugin. Requires mplayer])],
	[case "${enableval}" in
 				yes)	videoplayer_plugin=yes ;;
 				no)		videoplayer_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-videoplayer]) ;;
 	esac],
	[videoplayer_plugin=yes])
AM_CONDITIONAL([ENABLE_VIDEOPLAYER_PLUGIN], [test x$videoplayer_plugin = xyes])

dnl Weather plugin
AC_ARG_ENABLE([weather],
	[AS_HELP_STRING([--enable-weather],
		[Enable Weather plugin. Uses unofficial Google API to retrieve weather data])],
	[case "${enableval}" in
 				yes)	weather_plugin=yes ;;
 				no)		weather_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-weather]) ;;
 	esac],
	[weather_plugin=yes])
AM_CONDITIONAL([ENABLE_WEATHER_PLUGIN], [test x$weather_plugin = xyes])

dnl Plugins that have additional dependencies

dnl Unity Lebs Plugin (Ubuntu only)
AX_PYTHON_MODULE(gi.repository.Unity, [])
AS_IF([test "x${HAVE_PYMOD_GI_REPOSITORY_UNITY}" = "xyes"],
	  [have_unity=yes],
	  [have_unity=no])
AC_ARG_ENABLE([lens],
	[AS_HELP_STRING([--enable-lens],
		[Enable Unity Lens plugin.])],
	[case "${enableval}" in
 				yes)	lens_plugin=yes ;;
 				no)		lens_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-lens]) ;;
 	esac],
	[lens_plugin=no])
AM_CONDITIONAL([ENABLE_LENS_PLUGIN], [test x$lens_plugin = xyes])

dnl Indicator Me Plugin (enable by default when appindicator module is installed, suggesting Ubuntu)
AX_PYTHON_MODULE(appindicator, [])
AS_IF([test "x${HAVE_PYMOD_APPINDICATOR}" = "xyes"],
	  [have_indicator=yes],
	  [have_indicator=no])
AC_ARG_ENABLE([indicator-me],
	[AS_HELP_STRING([--enable-indicator-me],
		[Enable Indicator Me plugin.])],
	[case "${enableval}" in
 				yes)	indicator_me_plugin=yes ;;
 				no)		indicator_me_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-indicator-me]) ;;
 	esac],
	[indicator_me_plugin=${have_indicator}])
AM_CONDITIONAL([ENABLE_INDICATOR_ME_PLUGIN], [test x$indicator_me_plugin = xyes])

dnl Unity Lens (enable by default when appindicator module is installed, suggesting Ubuntu)
AC_ARG_ENABLE([lens],
	[AS_HELP_STRING([--enable-lens],
		[Enable Unity Lens.])],
	[case "${enableval}" in
 				yes)	lens_plugin=yes ;;
 				no)		lens_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-lens]) ;;
 	esac],
	[lens_plugin=${have_indicator}])
AM_CONDITIONAL([ENABLE_LENS_PLUGIN], [test x$lens_plugin = xyes])

dnl Indicator Messages Plugin (enable by default when appindicator module is installed, suggesting Ubuntu)
AC_ARG_ENABLE([indicator-messages],
	[AS_HELP_STRING([--enable-indicator-messages],
		[Enable Indicator Messages plugin.])],
	[case "${enableval}" in
 				yes)	indicator_messages_plugin=yes ;;
 				no)		indicator_messages_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-indicator-messages]) ;;
 	esac],
	[indicator_messages_plugin=${have_indicator}])
AM_CONDITIONAL([ENABLE_INDICATOR_MESSAGES_PLUGIN], [test x$indicator_messages_plugin = xyes])

dnl ALSA Volume Monitor Plugin
AX_PYTHON_MODULE(alsaaudio, [])
AS_IF([test "x${HAVE_PYMOD_ALSAAUDIO}" = "xyes"],
	  [have_alsaaudio=yes],
	  [have_alsaaudio=no])
AC_ARG_ENABLE([volume], 
	[AS_HELP_STRING([--enable-volume],
		[Enable ALSA volume monitor plugin. Requires python-alsaaudio])],
	[case "${enableval}" in
 				yes)	volume_plugin=yes ;;
 				no)		volume_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-volume]) ;;
 	esac],
	[volume_plugin=${have_alsaaudio}])
AM_CONDITIONAL([ENABLE_VOLUME_PLUGIN], [test x$volume_plugin = xyes])

dnl RSS Plugin
AX_PYTHON_MODULE(feedparser, [])
AS_IF([test "x${HAVE_PYMOD_FEEDPARSER}" = "xyes"],
	  [have_feedparser=yes],
	  [have_feedparser=no])
AC_ARG_ENABLE([rss],
	[AS_HELP_STRING([--enable-rss],
		[Enable RSS feed plugin. Requires python feedparser])],
	[case "${enableval}" in
 				yes)	rss_plugin=yes ;;
 				no)		rss_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-rss]) ;;
 	esac],
	[rss_plugin=${have_feedparser}])
AM_CONDITIONAL([ENABLE_RSS_PLUGIN], [test x$rss_plugin = xyes])

dnl System Monitor Plugin
AX_PYTHON_MODULE(gtop, [])
AS_IF([test "x${HAVE_PYMOD_GTOP}" = "xyes"],
	  [have_gtop=yes],
	  [have_gtop=no])
AC_ARG_ENABLE([sysmon],
	[AS_HELP_STRING([--enable-sysmon],
		[Enable System Monitor plugin. Requires python gtop])],
	[case "${enableval}" in
 				yes)	sysmon_plugin=yes ;;
 				no)		sysmon_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-sysmon]) ;;
 	esac],
	[sysmon_plugin=${have_gtop}])
AM_CONDITIONAL([ENABLE_SYSMON_PLUGIN], [test x$sysmon_plugin = xyes])

dnl Processes Plugin
AC_ARG_ENABLE([processes],
	[AS_HELP_STRING([--enable-processes],
		[Enable Processes plugin. Requires python gtop])],
	[case "${enableval}" in
 				yes)	processes_plugin=yes ;;
 				no)		processes_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-processes]) ;;
 	esac],
	[processes_plugin=${have_gtop}])
AM_CONDITIONAL([ENABLE_PROCESSES_PLUGIN], [test x$processes_plugin = xyes])

dnl Webcam
AX_PYTHON_MODULE(opencv, [])
AS_IF([test "x${HAVE_PYMOD_OPENCV}" = "xyes"],
	  [have_opencv=yes],
	  [have_opencv=no])
AC_ARG_ENABLE([webcam],
	[AS_HELP_STRING([--enable-webcam],
		[Enable Webcam plugin. Requires python OpenCV])],
	[case "${enableval}" in
 				yes)	webcam_plugin=yes ;;
 				no)		webcam_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-webcam]) ;;
 	esac],
	[webcam_plugin=${have_opencv}])
AM_CONDITIONAL([ENABLE_WEBCAM_PLUGIN], [test x$webcam_plugin = xyes])

dnl Evolution Calendar plugin
AX_PYTHON_MODULE(vobject, [])
AX_PYTHON_MODULE(evolution, [])
AS_IF([test "x${HAVE_PYMOD_VOBJECT}" = "xyes" -a "x${HAVE_PYMOD_EVOLUTION}" = "xyes"],
	  [have_calendar_modules=yes],
	  [have_calendar_modules=no])
AC_ARG_ENABLE([cal],
	[AS_HELP_STRING([--enable-cal],
		[Enable Evolution calendar plugin. Requires python vobject and python evolution])],
	[case "${enableval}" in
 				yes)	cal_plugin=yes ;;
 				no)		cal_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-cal]) ;;
 	esac],
	[cal_plugin=${have_calendar_modules}])
AM_CONDITIONAL([ENABLE_CAL_PLUGIN], [test x$cal_plugin = xyes])

dnl POP3/IMAP Email Checker plugin
AX_PYTHON_MODULE(gnomekeyring, [])
AS_IF([test "x${HAVE_PYMOD_GNOMEKEYRING}" = "xyes" ],
	  [have_keyring=yes],
	  [have_keyring=no])
AC_ARG_ENABLE([lcdbiff],
	[AS_HELP_STRING([--enable-lcdbiff],
		[Enable POP3 / IMAP email checker. Requires python gnomekeyring])],
	[case "${enableval}" in
 				yes)	lcdbiff_plugin=yes ;;
 				no)		lcdbiff_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-lcdbiff]) ;;
 	esac],
	[lcdbiff_plugin=${have_keyring}])
AM_CONDITIONAL([ENABLE_LCDBIFF_PLUGIN], [test x$lcdbiff_plugin = xyes])

dnl Sensors plugin
AX_PYTHON_MODULE(libsensors, [])
AX_PYTHON_MODULE(pylibatasmart, [])
AS_IF([test "x${HAVE_PYMOD_LIBSENSORS}" = "xyes" -a "x${HAVE_PYMOD_PYLIBATASMART}" = "xyes"],
	  [have_sensors_modules=yes],
	  [have_sensors_modules=no])
AC_ARG_ENABLE([sensors],
	[AS_HELP_STRING([--enable-sensors],
		[Enable Sensors plugin. Requires pylibsensors and pylibatasmart (not complete)])],
	[case "${enableval}" in
 				yes)	sensors_plugin=yes ;;
 				no)		sensors_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-sensors]) ;;
 	esac],
	[sensors_plugin=${have_sensors_modules}])
AM_CONDITIONAL([ENABLE_SENSORS_PLUGIN], [test x$sensors_plugin = xyes])

dnl LCDShot plugin
AC_ARG_ENABLE([lcdshot],
	[AS_HELP_STRING([--enable-lcdshot],
		[Enable LCDShot plugin. Take a picture of whatever is on the LCD])],
	[case "${enableval}" in
 				yes)	lcdshot_plugin=yes ;;
 				no)		lcdshot_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-lcdshot]) ;;
 	esac],
	[lcdshot_plugin=yes])
AM_CONDITIONAL([ENABLE_LCDSHOT_PLUGIN], [test x$lcdshot_plugin = xyes])

dnl Tweak plugin
AC_ARG_ENABLE([tweak],
	[AS_HELP_STRING([--enable-tweak],
		[Enable Tweak plugin.])],
	[case "${enableval}" in
 				yes)	tweak_plugin=yes ;;
 				no)		tweak_plugin=no ;;
 				*)		AC_MSG_ERROR([bad value ${enableval} for --enable-tweak]) ;;
 	esac],
	[tweak_plugin=yes])
AM_CONDITIONAL([ENABLE_TWEAK_PLUGIN], [test x$tweak_plugin = xyes])


AC_OUTPUT([
Makefile
src/Makefile
src/cal/Makefile
src/cal/default/Makefile
src/lcdbiff/Makefile
src/background/Makefile
src/cairo-clock/Makefile
src/cairo-clock/g15/Makefile
src/cairo-clock/g15/default/Makefile
src/cairo-clock/g19/Makefile
src/cairo-clock/g19/default/Makefile
src/cairo-clock/mx5500/Makefile
src/cairo-clock/mx5500/default/Makefile
src/clock/Makefile
src/clock/default/Makefile
src/fx/Makefile
src/g15daemon-server/Makefile
src/macro-recorder/Makefile
src/macro-recorder/default/Makefile
src/macros/Makefile
src/macros/default/Makefile
src/mpris/Makefile
src/mpris/default/Makefile
src/mounts/Makefile
src/mounts/default/Makefile
src/menu/Makefile
src/panel/Makefile
src/processes/Makefile
src/processes/default/Makefile
src/im/Makefile
src/im/default/Makefile
src/lens/Makefile
src/indicator-me/Makefile
src/indicator-me/default/Makefile
src/indicator-messages/Makefile
src/lcdshot/Makefile
src/notify-lcd/Makefile
src/notify-lcd/default/Makefile
src/screensaver/Makefile
src/screensaver/default/Makefile
src/stopwatch/Makefile
src/stopwatch/default/Makefile
src/sysmon/Makefile
src/sensors/default/Makefile
src/sensors/Makefile
src/sysmon/default/Makefile
src/rss/Makefile
src/rss/default/Makefile
src/sysmon/dials/Makefile
src/tweak/Makefile
src/volume/Makefile
src/volume/default/Makefile
src/videoplayer/Makefile
src/videoplayer/default/Makefile
src/weather/Makefile
src/weather/default/Makefile
src/webcam/Makefile
src/webcam/default/Makefile
])


AS_ECHO("Enabled Plugins")
AS_ECHO("---------------")
AS_ECHO_N("volume                      - ")
AS_IF([test "x$volume_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("rss                         - ")
AS_IF([test "x$rss_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("processes                   - ")
AS_IF([test "x$processes_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("sysmon                      - ")
AS_IF([test "x$sysmon_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("webcam                      - ")
AS_IF([test "x$webcam_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("cal                         - ")
AS_IF([test "x$cal_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("lcdbiff                     - ")
AS_IF([test "x$lcdbiff_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("background                  - ")
AS_IF([test "x$background_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("cairo-clock                 - ")
AS_IF([test "x$cairo_clock_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("clock                       - ")
AS_IF([test "x$clock_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("fx                          - ")
AS_IF([test "x$fx_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("g15daemon-server            - ")
AS_IF([test "x$g15daemon_server_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("im                          - ")
AS_IF([test "x$im_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("indicator-me                - ")
AS_IF([test "x$indicator_me_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("lens                        - ")
AS_IF([test "x$lens_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("indicator-messages          - ")
AS_IF([test "x$indicator_messages_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("lcdshot                     - ")
AS_IF([test "x$lcdshot_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("macro-recorder              - ")
AS_IF([test "x$macro_recorder_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("macros                      - ")
AS_IF([test "x$macros_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("menu                        - ")
AS_IF([test "x$menu_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("mounts                      - ")
AS_IF([test "x$mounts_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("mpris                       - ")
AS_IF([test "x$mpris_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("notify-lcd                  - ")
AS_IF([test "x$notify_lcd_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("panel                       - ")
AS_IF([test "x$panel_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("screensaver                 - ")
AS_IF([test "x$screensaver_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("stopwatch                   - ")
AS_IF([test "x$stopwatch_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("tweak                       - ")
AS_IF([test "x$tweak_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("videoplayer                 - ")
AS_IF([test "x$videoplayer_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("weather                     - ")
AS_IF([test "x$weather_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO_N("sensors                     - ")
AS_IF([test "x$sensors_plugin" = "xyes" ],
     [AS_ECHO("Enabled")],
     [AS_ECHO("Disabled")])
AS_ECHO("")
AS_ECHO("See ./configure --help for descriptions of these plugins and options to enable and disable them.")
